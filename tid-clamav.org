#+TITLE: This Is ClamScan scripts
#+SUBTITLE: a collection of scripts for easy and faster clamscanning

* About this package
This package adds a few scripts and notifications around the clamdav service.  It is meant to reduce the amount of work to get clamd running periodically and not taking up all available resources during scans.

The configuration file defines a few paths that will be skipped during scans that because they both a) contain a lot of files and b) don't have a big chance of catching infected files.

The sourcecode largely based on [[https://gist.github.com/johnfedoruk/19820540dc096380784c8cf0b7ef333b#system-scan-notifications][this gist]] by John A. Fedoruk, with some small modifications. 


* Installation

To install this package on Debian based systems (like Ubuntu) download the latest release from the [[https://github.com/thisisdevelopment/clamav/releases][releases page]] and run the following commands.  This will try to install the package using =dpkg= and if it fails, it will fall back to =apt= to install the missing dependencies and finish the installation.

#+begin_src sh :noweb yes 
sudo dpkg -i clamav-scan.deb || sudo apt install -f
#+end_src

To de-install =clamav-scan= run the following command to remove the package and clean its dependencies
#+begin_src sh
sudo apt remove clamav-scan && sudo apt autoremove
#+end_src

* Testing
You can verify that this package works by downloading a /TEST/ virus and leaving it somewhere in your homefolder.  This file is not an actual virus and harmless.  Its purpose is to verify a virusscanner works as expected.  You can read more about this file, and download it from [[https://www.eicar.org/download-anti-malware-testfile/][the EICAR.org website]].

* development
** package version 
the package version defined here will be reflected throughout the entire package

#+name: version
#+begin_src :export none
0.4
#+end_src

** scripts and configs
   closed: [2023-09-18 ma 09:43]
  
*** clam-scan.sh
this script will be executed to initiate the scan.

the first part of the scripts consists of scan configuration and reading the additional scan.conf file.
  
#+begin_src sh :mkdirp yes :tangle src/usr/local/sbin/clamav-scan :shebang "#!/bin/bash" :noweb yes
# clamav-scan.sh
export clamav_scan_version="<<version>>"
export log="/var/log/clamav/scan.log"

# set defaults 
export scan_path="/home/"
export ionice_class=3
export nice_priority=19

# source scan.conf for user customization
if [ -f "/etc/clamav/scan.conf" ]; then
  . /etc/clamav/scan.conf
fi
#+end_src

to be keep the currently logged in user up to date on the scanning progress, we need to be able to send them notifications.  we've added it to a function to make it reusable.  
#+begin_src sh :tangle src/usr/local/sbin/clamav-scan
# notify function, shows notifications to all logged in users

export xusers
function notify {
  local title=$1
  local body=$2
    
  # send the alert to systemd logger if exist
  if [[ -n $(command -v systemd-cat) ]] ; then
    echo "$title - $body" | /usr/bin/systemd-cat -t clamav -p emerg 
  fi

  # send an alert to all graphical users.
  xusers=($(who|awk '{print $1$nf}'|sort -u))
  for xuser in $xusers; do
    name=(${xuser/(/ })
    display=${name[1]/)/}
    dbus_address=unix:path=/run/user/$(id -u ${name[0]})/bus
    echo "run $name - $display - $dbus_address -" >> /tmp/testlog
    /usr/bin/sudo -u ${name[0]} display=${display} \
      dbus_session_bus_address=${dbus_address} \
      path=${path} \
      /usr/bin/notify-send -i security-low "$title" "$body"
  done

}
#+end_src

the following part encapsulates the actual scan.  it creates a few temporary files for output processing and then starts the scan.
this piece needs some additional love like configuring the location infected files are moved to if found
#+begin_src sh :tangle src/usr/local/sbin/clamav-scan

# -------------------- start scan -----------------------
export summary_file=`mktemp`
export fifo_dir=`mktemp -d`
export fifo="$fifo_dir/log"
export scan_status
export infected_summary

mkfifo "$fifo"
tail -f "$fifo" | tee -a "$log" "$summary_file" &

notify "virus scan started" ""

echo "------------ scan start ------------" > "$fifo"
echo "running scan on `date`" > "$fifo"
echo "scanning $target" > "$fifo"
ionice -c $ionice_class nice -n $nice_priority \
    clamdscan --infected \
              --multiscan \
              --fdpass \
              --stdout "$scan_path" | grep -ve 'warning|error|^$' > "$fifo"

scan_status="${pipestatus[0]}"
echo > "$fifo" 

infected_summary=`cat "$summary_file" | grep "infected files"`

rm "$summary_file"
rm "$fifo"
rmdir "$fifo_dir"
#+end_src

and finally we check the response code of the scan and notify the user about the result.  
#+begin_src sh :tangle src/usr/local/sbin/clamav-scan

if [[ "$scan_status" -eq "1" ]] ; then
    notify "virus signature(s) found" "$infected_summary"
    exit $scan_status
fi

if [[ "$scan_status" -eq "2" ]] ; then
    notify "error running virusscanner" "please check logs"
    exit $scan_status
fi

notify "scan complete, nothing found"
#+end_src
   
   
*** clamav.conf
#+begin_src conf :mkdirp yes :tangle src/etc/clamav/clamav.conf
# use sockets
localsocket /var/run/clamav/clamd.ctl
fixstalesocket true
localsocketgroup clamav
localsocketmode 666

#
user clamav
preludeanalyzername clamav
logfile /var/log/clamav/clamav.log
logfilemaxsize 4294967295
logtime yes
logrotate yes
logfacility log_local6
extendeddetectioninfo yes
maxconnectionqueuelength 15
readtimeout 180
sendbuftimeout 200
selfcheck 3600
bytecodetimeout 60000
maxscantime 120000
maxrecursion 16
pcrematchlimit 10000
pcrerecmatchlimit 5000

# this might need to be determined by the number of available cpus
maxthreads 4
           
# this prevents the "libclamav warning: cli_realpath: invalid arguments." error
# at least to a dir recursion of 30
maxdirectoryrecursion 30

# exludepath regexes, do we need these? will we ever run systemwide scans?
excludepath ^/proc
excludepath ^/run
excludepath ^/sys
excludepath ^/snap

# userspace
excludepath \.php$
excludepath ^/home/.+/.steam
excludepath /node_modules/
excludepath ^/home/.+/\.config
excludepath /docker/volumes/
excludepath /\.git/
#+end_src

*** scan.conf
#+begin_src conf :mkdirp yes :tangle src/etc/clamav/scan.conf 
nice_priority 19 #lowest -n
ionice_class 3 #only run when no other io requests -c
scan_path "/home/"
#+end_src

*** systemd.timer
#+begin_src conf :mkdirp yes :tangle src/etc/systemd/system/clamav-scan.timer
[unit]
description=run scan on workdays at lunchtime
requires=clamav-daemon.service

[timer]
oncalendar=
oncalendar=mon..fri 13:00
persistent=false
unit=clamav-scan.service

[install]
wantedby=timers.target
#+end_src

*** systemd.service
#+begin_src conf :mkdirp yes :tangle src/etc/systemd/system/clamav-scan.service
[unit]
description=nice ionized clamav scanner with notifications
requires=clamav-daemon.service

[service]
type=simple
user=root
execstart=/usr/local/sbin/clamav-scan

[install]
wantedby=multi-user.target
#+end_src

** build
this package is written using literate progamming in org-mode files.  to compile the codeblock into actual scripts you'll need emacs to tangle the files.  upon tangling the scripts will get automatically get the appropriate shebang and chmod changes if applicable.  missing directories will also be created automatically.

with emacs installed and locatable in your local =$path= you should be able to tangle the scripts using make.
#+begin_src sh
make tangle

# the second time around you might want to run make clean first.
# make clean tangle
#+end_src

another way is to open the =.org= file in emacs, and running =m-x org-babel-tangle ret=.

to generate the debian package you can run the =build= command.  /this command automatically runs =tangle= before generating the package so manual changes to the files will be overwritten./

#+begin_src sh
make build
## or even better:
# make clean build
#+end_src

installing the generated scripts on your system can be done using the =install= command.  This does not use the generated Debian package, but copies the files manually instead.  To install the files, =sudo= privileges are required.
#+begin_src sh
sudo make install
#+end_src


** Debian package
This package comes with Debian control and postinst files allowing us to generate a Debian package for easy installation.  The Debian package can be downloaded from the releases page. 

#+begin_src debian-control :mkdirp yes :tangle src/DEBIAN/control :noweb yes 
Package: clamav-scan
Version: <<VERSION>>
Maintainer: Jeroen Faijdherbe
Architecture: all
Description: Helper scripts for clamav scan automation
Depends: clamav, clamav-daemon
#+end_src

#+begin_src sh :mkdirp yes :tangle src/DEBIAN/preinst :shebang "#!/bin/bash"
CLAMAV_CONF="/etc/clamav/clamav.conf"
BACKUP_LOCATION="/etc/clamav/clamav.conf.bck"
if [ -f "$CLAMAV_CONF" -a ! -f "$BACKUP_LOCATION"]; then
    cp "$CLAMAV_CONF" "$BACKUP_LOCATION"
fi
#+end_src

After installation the timer will automatically activated by the installer using this =postinst= script.
#+begin_src sh :mkdirp yes :tangle src/DEBIAN/postinst :shebang "#!/bin/bash"
systemctl daemon-reload
systemctl enable --now clamav-scan.timer
#+end_src

Obligatory =prerm= script that will be invoked upon removal, disabling the timer that will be removed. 
#+begin_src sh :mkdirp yes :tangle src/DEBIAN/prerm :shebang "#!/bin/bash"
systemctl disable clamav-scan.timer
#+end_src

#+begin_src sh :mkdirp yes :tangle src/DEBIAN/postrm :shebang "#!/bin/bash"
CLAMAV_CONF="/etc/clamav/clamav.conf"
BACKUP_LOCATION="/etc/clamav/clamav.conf.bck"
if [ -f "$BACKUP_LOCATION" ]; then
    mv "$BACKUP_LOCATION" "$CLAMAV_CONF"
fi
#+end_src

** Local
buildstep requires emacs to extract codeblocks from this document

#+begin_src sh
make clean build # requires emacs installation
sudo make install
#+end_src

enable the timer
#+begin_src sh
sudo systemctl enable --now clamav-scan.timer
#+end_src

To run the scanner immediately:
#+begin_src sh
sudo make run
# or: sudo systemctl start clamav-scan.service
#+end_src


